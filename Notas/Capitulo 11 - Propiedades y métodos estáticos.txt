Propiedades estáticas


Mientras que los valores de las propiedades que hemos visto hasta ahora pertenecen a la instancia de un objeto, una propiedad estática forma parte de la clase:

class Person {

    protected static $name;

    public function __construct($name)
    {
        static::$name = $name;
    }

    public function getName()
    {
        return static::$name;
    }

}

$person1 = new Person('Duilio');
$person2 = new Person('Ramon');

$person1->getName(); // retornará Ramon

Quiere decir que todos los objetos que accedan a dicha propiedad estática podrán leer y modificar el mismo valor, y esto la mayoría de las veces no es conveniente y puede traer resultados inesperados y errores más difíciles de depurar.

Incluso en casos donde realmente queremos compartir una información a través de todo el sistema, es mejor utilizar un contenedor de inyección de dependencias, como aprenderás en el curso avanzado de PHP: creación de componentes.

Operador de resolución de ámbito
Para llamar a métodos estáticos, acceder a propiedades estáticas o constantes, usamos el operador de resolución de ámbito ::. Ejemplos:

Str::camelCase('words_with_underscores'); debería retornar: wordsWithUnderscores
Unit::MAX_DAMAGE
Diccionario::$words
Métodos estáticos y código acoplado
Cuando llamamos a un método estático dentro de un método de otra clase, estamos atando una clase a otra. En el ejemplo de la lección, ahora nuestra clase Attack requiere obligatoriamente de la clase Styde\Translator debido al llamado a Translator::get() mientras que Armor y Weapon son reemplazables dentro de la clase Unit puesto que se pasan por inyección de dependencias. Verás más sobre este tema en nuestro curso avanzado de PHP: creación de componentes.

Named constructors
Los métodos estáticos son bastante útiles para crear los llamados named constructors, como por ejemplo:

Unit::createSoldier('Silence') es el equivalente a new Soldier('Silence', new BasicSword());
Carbon::now() es el equivalente a new Carbon();